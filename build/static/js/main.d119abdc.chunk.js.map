{"version":3,"sources":["auth.tsx","components/header/Header.tsx","components/react-table/Table.tsx","views/alertView/AlertView.tsx","store.tsx","views/loginView/LoginView.tsx","protected.route.tsx","views/notificationView/CreateNotificationView.tsx","App.tsx","serviceWorker.ts","index.tsx","Media/img/logo/logo_white.svg"],"names":["authenticated","this","cb","localStorage","clear","Userbutton","getItem","id","className","href","withRouter","props","src","aaslogo","alt","onClick","auth","logout","history","push","Table","useState","alerts","setAlerts","useEffect","getAlert","a","axios","url","method","headers","Authorization","then","response","alertList","fixAlert","data","e","list","i","length","fields","columns","Header","accessor","initialState","user","token","loggedIn","Store","React","createContext","reducer","state","action","type","payload","LoginView","username","setUsername","password","setPassword","dispatch","useContext","onSubmit","preventDefault","getToken","login","Axios","result","setItem","name","value","placeholder","onChange","target","ProtectedRoute","Component","component","rest","render","isAuthenticated","to","pathname","from","location","App","exact","path","AlertView","CreateNotificationView","Boolean","window","hostname","match","ReactDOM","useReducer","values","Provider","children","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.d119abdc.chunk.js","sourcesContent":["class Auth {\n  authenticated: boolean;\n  constructor() {\n    this.authenticated = false;\n  }\n\n  login(cb: any) {\n    this.authenticated = true;\n    cb();\n  }\n  logout(cb: any) {\n    localStorage.clear();\n    this.authenticated = false;\n    cb();\n  }\n  isAuthenticated() {\n    return this.authenticated;\n  }\n}\nexport default new Auth();\n","import React from 'react';\r\nimport './Header.css';\r\nimport auth from '../../auth';\r\nimport aaslogo from '../../Media/img//logo/logo_white.svg';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction Userbutton() {\r\n  if (localStorage.getItem('user')) {\r\n    return (\r\n      <div id='userbutton' className='headerbutton'>\r\n        <p>{localStorage.getItem('user')}</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <a id='loginbutton' className='headerbutton' href='/login'>\r\n        <p>Login</p>\r\n      </a>\r\n    );\r\n  }\r\n}\r\n\r\nconst Header: React.FC<{ history: any }> = props => {\r\n  return (\r\n    <div className='header'>\r\n      <a href='/'>\r\n        <img src={aaslogo} alt='AAS logo' className='logo' />\r\n      </a>\r\n      <a id='aboutbutton' className='headerbutton' href='/about'>\r\n        <p>About</p>\r\n      </a>\r\n      <button\r\n        className='headerbutton'\r\n        onClick={() => {\r\n          auth.logout(() => {\r\n            props.history.push('/login');\r\n          });\r\n        }}>\r\n        Logout\r\n      </button>\r\n      <Userbutton />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Header);\r\n","import React, { useState, useEffect } from 'react';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\nimport axios from 'axios';\n\nconst Table: React.FC = () => {\n  const [alerts, setAlerts] = useState<Object[]>([]);\n\n  useEffect(() => {\n    getAlert();\n  }, []);\n\n  //fetches alerts and sets state\n  const getAlert = async () => {\n    await axios({\n      url: 'http://localhost:8000/alert/all/',\n      method: 'GET',\n      headers: {\n        Authorization: 'Token ' + localStorage.getItem('token')\n      }\n    }).then((response: any) => {\n      const alertList = fixAlert(response.data);\n      setAlerts(alertList);\n    });\n  };\n  //format JSON\n  const fixAlert = (e: any) => {\n    let list: any = [];\n    for (let i = 0; i < e.length; i++) {\n      list.push(e[i].fields);\n    }\n    return list;\n  };\n  const columns: any = [\n    { Header: 'Timestamp', accessor: 'start_time' },\n    { Header: 'Alert ID', accessor: 'alert_id' },\n    { Header: 'Source', accessor: 'source' },\n    { Header: 'Netbox', accessor: 'netbox' }\n  ];\n\n  return <ReactTable columns={columns} data={alerts}></ReactTable>;\n};\n\nexport default Table;\n","import React from 'react';\nimport './AlertView.css';\nimport Header from '../../components/header/Header';\nimport Table from '../../components/react-table/Table';\nimport '../../components/react-table/table.css';\nimport { withRouter } from 'react-router-dom';\ntype PropType = {\n  history: any;\n};\n\nconst AlertView: React.FC<PropType> = props => {\n  return (\n    <div>\n      <header>\n        <Header />\n      </header>\n      <div className='table'>\n        <Table />\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(AlertView);\n","import React from 'react';\n\ninterface IState {\n  user: string | null;\n  token: string | null;\n  loggedIn: boolean;\n}\n\nconst initialState: IState = {\n  user: localStorage.getItem('user'),\n  token: localStorage.getItem('token'),\n  loggedIn: localStorage.getItem('user') ? true : false\n};\n\nexport const Store = React.createContext<IState | any>(initialState);\n\nfunction reducer(\n  state: IState,\n  action: { type: string; payload: any }\n): IState {\n  switch (action.type) {\n    case 'setUser':\n      return { ...state, user: action.payload };\n    case 'setToken':\n      return { ...state, token: action.payload };\n    case 'setLogin':\n      return { ...state, token: action.payload };\n    default:\n      return initialState;\n  }\n}\n\nexport function StoreProvider(props: any) {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const values = { state, dispatch };\n  return <Store.Provider value={values}>{props.children}</Store.Provider>;\n}\n","import React, { useState, useContext } from 'react';\nimport './LoginView.css';\nimport Axios from 'axios';\nimport { Store } from '../../store';\nimport auth from '../../auth';\nimport aaslogo from '../../Media/img/logo/logo_white.svg'\n\nconst LoginView: React.FC<any> = props => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const { dispatch } = useContext(Store);\n\n  //runs when the form is submitted. GetToken() will run and then it will redirect to AlertView\n  const onSubmit = async (e: any) => {\n    e.preventDefault();\n    await getToken();\n    if (localStorage.getItem('token')) {\n      auth.login(() => {\n        props.history.push('/');\n      });\n    }\n  };\n\n  //get Token and set localStorage with token, username and isloggedin\n  const getToken = async () => {\n    await Axios({\n      url: 'http://127.0.0.1:8000/api-token-auth/',\n      method: 'POST',\n      data: { username: username, password: password }\n    }).then(result => {\n      localStorage.setItem('token', result.data.token);\n      localStorage.setItem('user', result.data.token ? username : 'null');\n      localStorage.setItem('loggedin', result.data.token ? 'true' : 'false');\n      dispatch({ type: 'setUser', payload: username });\n      dispatch({ type: 'setToken', payload: result.data.token });\n      dispatch({\n        type: 'setLoggedin',\n        payload: result.data.token ? true : false\n      });\n    });\n  };\n\n  return (\n    <div>\n      <div className='container'>\n        <div className='login-container'>\n      <img className='login-logo' src={aaslogo} alt=\"logo\"/>\n          <h1 className=\"login-header\">Login</h1>\n          <form onSubmit={onSubmit} className=\"login-form\">\n            <div>\n              <input\n                name={'username'}\n                value={username}\n                placeholder={'Email'}\n                onChange={e => setUsername(e.target.value)}\n              />\n            </div>\n            <div>\n              <input\n                name='password'\n                type='password'\n                value={password}\n                placeholder='Password'\n                onChange={e => setPassword(e.target.value)}\n              />\n            </div>\n            <button type='submit'> Log in</button>\n          </form>\n          <a className=\"login-feide\" href={'http://localhost:8000/login/dataporten/'}>\n            login with feide\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginView;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport auth from './auth';\n\nexport const ProtectedRoute = ({ component: Component, ...rest }: any) => {\n  return (\n    <Route\n      {...rest}\n      render={props => {\n        if (\n          auth.isAuthenticated() ||\n          localStorage.getItem('loggedin') === 'true'\n        ) {\n          return <Component {...props} />;\n        } else {\n          return (\n            <Redirect\n              to={{\n                pathname: '/login',\n                state: {\n                  from: props.location\n                }\n              }}\n            />\n          );\n        }\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport './CreateNotificationView.css';\nimport Header from '../../components/header/Header';\nimport '../../components/react-table/table.css';\nimport { withRouter } from 'react-router-dom';\nimport WeeklyScheduler from 'react-week-scheduler';\nimport 'react-week-scheduler/react-week-scheduler.css';\ntype PropType = {\n  history: any;\n};\n\nconst CreateNotificationView: React.FC<PropType> = props => {\n  return (\n    <div>\n      <Header />\n      <WeeklyScheduler />\n    </div>\n  );\n};\n\nexport default withRouter(CreateNotificationView);\n","import React from 'react';\nimport AlertView from './views/alertView/AlertView';\nimport LoginView from './views/loginView/LoginView';\nimport { Route, Switch } from 'react-router-dom';\nimport { ProtectedRoute } from './protected.route';\nimport './variables.css';\nimport './colorscheme.css';\nimport CreateNotificationView from './views/notificationView/CreateNotificationView';\n\nconst App: React.SFC = () => {\n  return (\n    <div>\n      <Switch>\n        <ProtectedRoute exact path='/' component={AlertView} />\n        <ProtectedRoute\n          exact\n          path='/notification-profile'\n          component={CreateNotificationView}\n        />\n        <Route path='/login' component={LoginView} />\n        <Route path='*' component={() => <h1>404 not found</h1>} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StoreProvider } from './store';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo_white.4fecb7a7.svg\";"],"sourceRoot":""}